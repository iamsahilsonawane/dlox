# Grammer for dlox

### Syntax Grammer
program          → declaration* EOF ;
declaration      → varDecl | statement;
varDecl          → "var" IDENTIFIER ("=" expression ";")? ;
funDecl          → "fun" function ;
function         → (IDENTIFIER)? lamda
lambda           → "(" parameters? ")" block ;
parameters       → IDENTIFIER ( "," IDENTIFIER )* ;
statement        → exprStmt | printStmt | ifExpr
                   | whileStmt | forStmt | block | breakStmt | returnStmt;
breakStmt        → "break" ";" ;
ifExpr           → "if" "(" expression ")" statement
                   ( "else" statement )? ;
forStmt          → "for" "(" (varDecl | exprStmt | ";")
                  expression? ";"
                  expression? ")" statement ;
whileStmt        → "while" "(" expression ")" statement ;
block            → "{" declaration* "}" ;
exprStmt         → expression ";" ;
printStmt        → "print" expression ";" ;
returnStmt        → "return" expression? ";" ;

expression       → assignment ;
assignment       → IDENTIFIER "=" assignment | conditional ;
conditional      → logic_or ( "?" expression ":" expression)* ;
logic_or         → logic_and ( "or" logic_and )* ;
logic_and        → equality ( "and" equality )*;
equality         → comparison ( ( "!=" | "==" ) comparison )* ;
comparison       → term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term             → factor ( ( "-" | "+" ) factor )* ;
factor           → unary ( ( "/" | "*" ) unary )* ;
unary            → ( "!" | "-" | "--" | "++" ) unary
                 | postfix ;
postfix          → call ( "--" | "++" )* ;
call             → primary ( "(" arguments? ")" ) ;
arguments        → expression ( "," expression )* ;
primary          → NUMBER | STRING | "true" | "false" | "nil" | "(" expression ")"
                 | IDENTIFIER
                 //error productions
                 | ( "!=" | "==" ) equality
                 | ( ">" | ">=" | "<" | "<=" ) comparison
                 | ( "+" ) term
                 | ( "/" | "*" ) factor ;
