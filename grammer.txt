# Grammer for dlox

### Syntax Grammer
program          → declaration* EOF ;
declaration      → varDecl | statement;
varDecl          → "var" IDENTIFIER ("=" expression ";")? ;
statement        → exprStmt | printStmt |  block;
bloc             → "{" declaration* "}";
exprStmt         → expression ";" ;
printStmt        → "print" expression ";" ;

expression       → comma ;
comma            → conditional ( "," equality )* ;
conditional      → comparison ( "?" expression ":" expression)* ;
equality         → comparison ( ( "!=" | "==" ) comparison )* ;
comparison       → term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term             → factor ( ( "-" | "+" ) factor )* ;
factor           → unary ( ( "/" | "*" ) unary )* ;
unary            → ( "!" | "-" | "--" | "++" ) unary
                 | postfix ;
postfix          → primary ( "--" | ++" )* ;
primary          → NUMBER | STRING | "true" | "false" | "nil" | "(" expression ")"
                 | IDENTIFIER
                 //error productions 
                 | ( "!=" | "==" ) equality
                 | ( ">" | ">=" | "<" | "<=" ) comparison
                 | ( "+" ) term
                 | ( "/" | "*" ) factor ;
